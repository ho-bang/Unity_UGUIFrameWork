<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<opml version="1.0">
  <head />
  <body>
    <outline text="기존">
      <outline text="NKCUI">
        <outline text="NKCUIBase">
          <outline text="MonoBehaviour. 상속 받고 있으며, 게임시스템에 연결되는 기능과 관련이 있음" />
        </outline>
        <outline text="NKCUIManager">
          <outline text="NKCUIBase를 열릴 때 스택으로 관리하며, " />
          <outline text="1. 게임 이벤트에 관련된 처리를 호출 시킨다. ">
            <outline text="ex) OnOperatorUpdate" />
          </outline>
          <outline text="2. 인스턴스를 만들어 준다">
            <outline text="2.1">
              <outline text="NKCUIManager.OpenNewInstance&lt;T&gt;" />
              <outline text="인스턴스를 만든다. (없으면 Create, 있으면 컨테이너에서 얻어옴)" />
            </outline>
            <outline text="2.2">
              <outline text="NKCUIManager.GetInstance&lt;T&gt;()" />
            </outline>
            <outline text="요 과정이 이렇게 나뉘어 있을 필요가 있을까?" />
            <outline text="걍, Get() 하면 알아서 인스턴스 넘어오는 처리로 하면될 것 같은데" />
          </outline>
        </outline>
        <outline text="NKCAssetResourceManager">
          <outline text="에셋번들에서 리소스를 불러오고 Dictionary컨테이너에 담아 둔다. 레퍼런스 체크를 해서 사용하지 않을 경우, Enum 타입에 따라 삭제 처리가 진행된다.">
            <outline text="Pool이 있다. Qeue 컨테이너며" />
          </outline>
          <outline text="OpenInstance&lt;T&gt;" />
          <outline text="OpenResource&lt;T&gt;" />
        </outline>
        <outline text="SceneManager">
          <outline text="Scene_element(?)" />
        </outline>
      </outline>
    </outline>
    <outline text="새로 잡아둬야 할 것">
      <outline text="New">
        <outline text="UI">
          <outline text="Dialog">
            <outline text="기존의 NKCUIBase에 대응됨" />
          </outline>
          <outline text="DialogManager(UIManager)">
            <outline text="기존에 NKCUIManager와 같음" />
          </outline>
          <outline text="Control">
            <outline text="기존의 ComState ~~ 와 대응됨" />
            <outline text="버튼, 토글  등등 " />
            <outline text="기능을 컨트롤 하기 위한 유니티 컴포넌트를 래핑해 사용하기 좋도록 하자" />
          </outline>
          <outline text="만들어야 할 것">
            <outline text="메세지 처리" color="Yellow">
              <outline text="UI들 끼리 종속성을 없애고, 내가 어떤 행동을 했는지 broadcast 하기 위해">
                <outline text="전엔 이 방식을 활용했지만, 이게 맞는 걸까?" />
                <outline text="Event로 등록해서 처리해야 하는 게 옳은 게 아닐까 싶다." />
                <outline text="Event로 등록을 하게되면, Interface를 하나 추가해서 처리하면 될 듯? IUIEvent" />
              </outline>
              <outline text="이벤트 처리가 더 좋지 않을까?">
                <outline text="IUIEvent" color="Green">
                  <outline text="AddEvent" />
                  <outline text="Type">
                    <outline text="이벤트가 호출 되었을 때, Type으로 판단을 한다." />
                  </outline>
                  <outline text="&lt;T&gt;로 만들면 내가 캐스팅 하는 비용이 줄어들까?">
                    <outline text="EX) ">
                      <outline text="public Interface IUIEvent&lt;T&gt; : where UIDialog">
                        <outline text="enum Type;" />
                        <outline text="T  my" />
                      </outline>
                    </outline>
                  </outline>
                </outline>
              </outline>
            </outline>
            <outline text="컴포넌트">
              <outline text="탭">
                <outline text="탭 같은 경우, " />
              </outline>
              <outline text="스크롤 뷰">
                <outline text="슬롯들 재활용할 때 기능을 구현하려면 래핑해서 사용하는 게 좋을 듯" />
              </outline>
              <outline text="버튼">
                <outline text="이건 굳이 해야 할 필요가 있을까 싶음 " />
              </outline>
              <outline text="이미지">
                <outline text="Texture를 경로로 불러올 수 있도록 래핑하는" />
              </outline>
            </outline>
          </outline>
        </outline>
        <outline text="SceneLoader">
          <outline text="만듬" />
        </outline>
        <outline text="SceneManager">
          <outline text="유니티의 씬 개념이 아니라 음... 게임 로직에서 논리적인 판단으로 나눠둔 영역" />
          <outline text="사실 이걸 왜 사용하는진 잘 모르겠는데.. 필요할 것 같기도 하고" />
        </outline>
        <outline text="Manager">
          <outline text="ResourceManager" />
          <outline text="원본 리소스를 불러와 놓고, 캐시해두고 불러오는 처리가 필요하다." />
        </outline>
      </outline>
    </outline>
    <outline text="NKC">
      <outline text="Lua 좀 봐볼까?">
        <outline text="NKMLua">
          <outline text="Lua를 래핑해서 사용 하는 클래스" />
          <outline text=".txt 파일을 불러와서 테이블을 읽어들인다.">
            <outline text="문자열로 읽는 방식, 인덱스로 읽는 방식 두 개가 있다." />
          </outline>
          <outline text="KeraLua" style="Bold" color="Green">
            <outline text="요 녀석을 사용하는데, 요건 왜 쓰는거지?" />
          </outline>
        </outline>
      </outline>
      <outline text="SCEN">
        <outline text="뭐 정말 다양한 걸 한다. ">
          <outline text="게임 오브젝트를 받아둬서 처리를 하기도 하고, Lua 데이터로 뭔가 지지고 복고 한다." />
        </outline>
        <outline text="NKC_SCEN_BASIC">
          <outline text="Method">
            <outline text="ScenChangeStart()" />
            <outline text="ScenDataReqWaitUpdate()" />
            <outline text="ScenLoadUIUpdate() .. " />
            <outline text="씬의 시퀀스를 담당하고 씬의 상태를 알 수 있다." />
          </outline>
        </outline>
        <outline text="SCEN_MANAGER">
          <outline text="Update()">
            <outline text="여기서 m_NKM_SCEN_NOW 통해서 현재 씬의 상태를 파악한다." />
          </outline>
        </outline>
      </outline>
    </outline>
    <outline text="5.19">
      <outline text="에디터 유아이 만들어서 씬 이동" />
      <outline text="GameManager">
        <outline text="기본 시퀀스가 필요하다." />
      </outline>
      <outline text="ChangeScene">
        <outline text="MainScene" />
      </outline>
    </outline>
    <outline text="노드 줄 맞추기, 노드 하이퍼 링크">
      <outline text="노드 줄 맞추기">
        <outline text="해당 줄에 색상 일괄 처리 (?)" />
      </outline>
    </outline>
  </body>
</opml>